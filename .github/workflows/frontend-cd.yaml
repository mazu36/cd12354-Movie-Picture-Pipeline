# Workflow name
name: Frontend Continuous Deployment

env:
  REPOSITORY: frontend
  REACT_APP_MOVIE_API_HOST: ${{ vars.REACT_APP_MOVIE_API_HOST}}
  REACT_APP_MOVIE_API_URL: http://${{env.REACT_APP_MOVIE_API_HOST}}:5000

# Triggers for the workflow
on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:
      
  # Automatic trigger on pull request events targeting the main branch and frontend changed
  push:
    branches: 
      - main
    paths:
      - 'starter/frontend/**'

# Jobs defined in the workflow
jobs:
  frontend_lint:

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true

    steps:
      - name: Check out the code from the repository.
        uses: actions/checkout@v4

      - name: Copy package-lock.json files
        run: cp starter/frontend/package-lock.json .

      - name: Set up a Node.js environment using the specified node version.
        uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: 'npm'

      - name: Install the dependencies.
        #run: cd starter/frontend && npm ci
        run: cd starter/frontend && npm install

      - name: Run the linter.
        run: cd starter/frontend && npm run lint

  frontend_test:

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true

    steps:
      - name: Check out the code from the repository.
        uses: actions/checkout@v4

      - name: Copy package-lock.json files
        run: cp starter/frontend/package-lock.json .

      - name: Set up a Node.js environment using the specified node version.
        uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: 'npm'

      - name: Install the dependencies.
        #run: cd starter/frontend && npm ci
        run: cd starter/frontend && npm install

      - name: Run the tests.
        run: cd starter/frontend && CI=true npm test

  frontend_build:
    needs: [frontend_lint, frontend_test]
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "image in push is ${REGISTRY}/${{env.REPOSITORY}}:${IMAGE_TAG}"
          cd starter/frontend 
          docker build --build-arg=REACT_APP_MOVIE_API_URL=${{env.REACT_APP_MOVIE_API_URL}} -t ${REGISTRY}/${{env.REPOSITORY}}:${IMAGE_TAG} .
          docker push ${REGISTRY}/${{env.REPOSITORY}}:${IMAGE_TAG}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Deploy to Kubernetes
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |

          echo "image in deploy is ${REGISTRY}/${{env.REPOSITORY}}:${IMAGE_TAG}"
          aws eks --region us-east-1 update-kubeconfig --name cluster
          cd starter/frontend/k8s
          kustomize edit set image frontend=${REGISTRY}/${{env.REPOSITORY}}:${IMAGE_TAG}
          kustomize build | kubectl apply -f -


